name: "hed_vgg16"

#### data layers start here #####
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'label'
  python_param {
    module: 'data_layer.layer'
    layer: 'DenseDataLayer'
  }
}

#### data layers end here #####
#### raw vgg layers start here #####

# block conv1 (fixed)
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 35
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# block conv2
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# block conv3
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# block conv4
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# block conv5
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}


## all the loss/"Crop" layers go here

## DSN conv 1 ###
layer { 
  name: "score-dsn1"
  type: "Convolution"
  bottom: "conv1_2"
  top: "score-dsn1-up"
  param {
    lr_mult: 0.01
    decay_mult: 1
  }
  param {
    lr_mult: 0.02
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
  }
}

# no upsampling is needed
layer { 
  type: "Crop"
  name: "crop1"
  bottom: "score-dsn1-up"
  bottom: "data"
  top: "upscore-dsn1" 
  crop_param {
    offset_height: 34
    offset_width: 34
  }
  propagate_down: 1
  propagate_down: 0
}

## DSN conv 2 ###
layer { 
  name: "score-dsn2"
  type: "Convolution"
  bottom: "conv2_2"
  top: "score-dsn2"
  param {
    lr_mult: 0.01
    decay_mult: 1
  }
  param {
    lr_mult: 0.02
    decay_mult: 0
  }
  convolution_param {
    num_output: 4
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
  }
}

layer {
  type: "PeriodicShuffle"
  name: "upsample_2"
  bottom: "score-dsn2"
  top: "score-dsn2-up"
  periodic_shuffle_param {
    group_size: 2
    num_output: 1
  } 
}

layer { 
  type: "Crop"
  name: "crop2"
  bottom: "score-dsn2-up"
  bottom: "data"
  top: "upscore-dsn2" 
  crop_param {
    offset_height: 34
    offset_width: 34
  }
  propagate_down: 1
  propagate_down: 0
}


## DSN conv 3 ###
layer { 
  name: "score-dsn3"
  type: "Convolution"                
  bottom: "conv3_3"
  top: "score-dsn3"
  param {
    lr_mult: 0.01
    decay_mult: 1
  }
  param {
    lr_mult: 0.02
    decay_mult: 0
  }
  convolution_param {
    num_output: 16
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
  }
}

layer {
  type: "PeriodicShuffle"
  name: "upsample_4"
  bottom: "score-dsn3"
  top: "score-dsn3-up"
  periodic_shuffle_param {
    group_size: 4
    num_output: 1
  } 
}

layer { 
  type: "Crop"
  name: "crop3"
  bottom: "score-dsn3-up"
  bottom: "data"
  top: "upscore-dsn3" 
  crop_param {
    offset_height: 34
    offset_width: 34
  }
  propagate_down: 1
  propagate_down: 0
}


## DSN conv 4 ###
layer { 
  name: "score-dsn4"
  type: "Convolution"
  bottom: "conv4_3"
  top: "score-dsn4"
  param {
    lr_mult: 0.01
    decay_mult: 1
  }
  param {
    lr_mult: 0.02
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
  }
}

layer {
  type: "PeriodicShuffle"
  name: "upsample_8"
  bottom: "score-dsn4"
  top: "score-dsn4-up"
  periodic_shuffle_param {
    group_size: 8
    num_output: 1
  } 
}

layer { 
  type: "Crop"
  name: "crop4"
  bottom: "score-dsn4-up"
  bottom: "data"
  top: "upscore-dsn4"
  crop_param {
    offset_height: 34
    offset_width: 34
  }
  propagate_down: 1
  propagate_down: 0
}


## DSN conv 5 ###
layer { 
  name: "score-dsn5"
  type: "Convolution"
  bottom: "conv5_3"
  top: "score-dsn5"
  param {
    lr_mult: 0.01
    decay_mult: 1
  }
  param {
    lr_mult: 0.02
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
  }
}

layer {
  type: "PeriodicShuffle"
  name: "upsample_16"
  bottom: "score-dsn5"
  top: "score-dsn5-up"
  periodic_shuffle_param {
    group_size: 16
    num_output: 1
  } 
}


layer { 
  type: "Crop"
  name: "crop5"
  bottom: "score-dsn5-up"
  bottom: "data"
  top: "upscore-dsn5"
  crop_param {
    offset_height: 34
    offset_width: 34
  }
  propagate_down: 1
  propagate_down: 0
}


### Concat and multiscale weighted-fusion layer ###
layer {
  name: "concat"
  bottom: "upscore-dsn1"
  bottom: "upscore-dsn2"
  bottom: "upscore-dsn3"
  bottom: "upscore-dsn4"
  bottom: "upscore-dsn5"
  top: "concat-upscore"
  type: "Concat"
  concat_param {
    concat_dim: 1
  } 
}

layer {
  name: "new-score-weighting"
  type: "Convolution"
  bottom: "concat-upscore"
  top: "upscore-fuse"
  param {
    lr_mult: 0.01
    decay_mult: 1
  }
  param {
    lr_mult: 0.02
    decay_mult: 0
  }
  convolution_param {
    engine: CAFFE
    num_output: 1
    kernel_size: 1
    weight_filler { 
      type: "constant"
      value: 0.2
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
} 


### the final loss function ###
# training
layer {
  type: "WeightedSigmoidCrossEntropyLoss"
  name: "fuse"
  bottom: "upscore-fuse"
  bottom: "label"
  propagate_down: 1
  propagate_down: 0
  top: "fuse_loss"
  loss_weight: 1
  weighted_sigmoid_cross_entropy_param {
    auto_weight: true
  }
}
